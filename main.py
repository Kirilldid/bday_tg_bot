import os
import telebot
from flask import Flask, request
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# Sample questions for the quiz with images
questions = [
    {
        "question": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ñ—Ä–∞–∑—É: ¬´–ù–µ–±–ª–∞–≥–æ–∑–≤—É—á–Ω–æ –∏...¬ª",
        "options": ["–°–æ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ", "–ê—Å–æ—Ü–∏–∞–ª—å–Ω–æ —Ç–µ—Ä–ø–∏–º–æ", "–°–æ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ", "–•—É–π —Å –Ω–∏–º!"],
        "answer": 2,
        "image": "https://i.ibb.co/B5gNxF2j/IMG-3116.png",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–Ω–∞–µ—à—å –∫–ª–∞—Å—Å–∏–∫—É!",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏–¥–∏–º–æ, —Ç—ã –≤–æ –≤—Ä–µ–º—è —ç—Ç–æ–≥–æ —Å–ø–æ—Ä–∞ —Å–ø–∞–ª."
    },
    {
        "question": "–ö–∞–∫ –∑–æ–≤—É—Ç —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?",
        "options": ["–ú–∏—à–∞", "–°–∞—à–∞", "–î–∏–º–∞", "–î—ç–Ω –†–µ–π–Ω–æ–ª—å–¥—Å"],
        "answer": 1,
        "image": "https://i.ibb.co/Xkb7TNFW/IMG-3104.png",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–º–Ω–∏—à—å –≤—Å–µ—Ö!",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–±—ã–ª –ª–µ–≥–µ–Ω–¥—É..."
    },
    {
        "question": "–ö—Ç–æ —Å–∫—Ä—ã—Ç –Ω–∞ —Ñ–æ—Ç–æ?",
        "options": ["–ò–ª—å—è", "–î—ç–Ω–∏–ª", "–ö–∏—Ä–∏–ª–ª", "–î—è–¥—è –ò–≥–æ—Ä—å"],
        "answer": 0,
        "image": "https://i.ibb.co/cX7kXrCY/IMG-2858.png",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–µ—Ç, —ç—Ç–æ —Ç—ã —Ñ–æ—Ç–∫–∞–ª?",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏–¥–∏–º–æ, —Ç–µ–±—è —Ç–∞–º –Ω–µ –±—ã–ª–æ."
    },
    {
        "question": "–° –∫–∞–∫–æ–π —Ç—É—Å–æ–≤–∫–∏ —ç—Ç–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —Ñ–æ—Ç–æ?",
        "options": ["–î–† –í –ü–£–°–¢–û–¢–ï", "–î–† –í –î–£–•–ù–û–¢–ï", "–î–† –£ –ö–ê–ú–ò–ù–ê", "–≠—Ç–æ –≤–æ–æ–±—â–µ –ù–∏–∫–æ–ª—å—Å–∫"],
        "answer": 0,
        "image": "https://i.ibb.co/fVR4s5GY/IMG-0604.jpg",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ –±—ã–ª–æ –ª–µ–≥–∫–æ!",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ö–∞–∫ –º–æ–∂–Ω–æ –∑–∞–±—ã—Ç—å —Ç–∞–∫—É—é –∫–ª–∞—Å—Å–∏–∫—É?"
    },
    {
        "question": "–° –∫–∞–∫–æ–π —Ç—É—Å–æ–≤–∫–∏ —ç—Ç–æ —Ñ–æ—Ç–æ?",
        "options": ["–î–† –í –ü–£–°–¢–û–¢–ï", "–î–† –ù–ê –í–û–î–ï", "–î–† –£ –ö–ê–ú–ò–ù–ê", "–ü—Ä–∞–∑–¥–Ω–∏–∫ —Ñ–æ–Ω–∞—Ä–∏–∫–æ–≤ 2005"],
        "answer": 2,
        "image": "https://i.ibb.co/fGKS9RYP/IMG-6949.jpg",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–µ—É–∂–µ–ª–∏ —Ç—ã –∏ —ç—Ç–æ –ø–æ–º–Ω–∏—à—å?",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°—Ä–∞–∑—É –≤–∏–¥–Ω–æ, –∫—Ç–æ –Ω–µ –∫–æ–ª–æ–ª –¥—Ä–æ–≤–∞ –≤ —Ç–æ—Ç —Ä–∞–∑."
    },
    {
        "question": "–ü–æ–¥ –∫–∞–∫—É—é –ø–µ—Å–Ω—é –º—ã –Ω–æ—Å–∏–ª–∏—Å—å –≤ 5 —É—Ç—Ä–∞ –ø–æ –ø–æ–ª—é?",
        "options": ["Life is life", "You can't always get what you want", "Satisfaction", "–í–æ—Ç –∏ –ø–æ–º–µ—Ä –¥–µ–¥ –ú–∞–∫—Å–∏–º"],
        "answer": 1,
        "image": "https://i.ibb.co/bwGGC54/IMG-2954.jpg",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–µ –∑–∞–±—ã–ª, –¥–∞–∂–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –º—ã –±—É—Ö–∞–ª–∏ –≤—Å—é –Ω–æ—á—å!",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ù—É –∏ –Ω–µ—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ ‚Äî –º—ã –∂–µ –±—É—Ö–∞–ª–∏ –≤—Å—é –Ω–æ—á—å..."
    },
    {
        "question": "–ö—Ç–æ –ø–æ–¥ –º–∞—Å–∫–æ–π –∫–∞–±–∞–Ω–∞?",
        "options": ["–ö–æ–ª—è", "–í–∞—Å—è", "–î—ç–Ω–∏–ª", "–ù–∏–∫—Ç–æ, —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–∞–±–∞–Ω"],
        "answer": 0,
        "image": "https://i.ibb.co/bg2b8wBG/IMG-6995.png",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ö—Ç–æ –∂–µ –µ—â–µ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å?",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–µ—É–∂–µ–ª–∏ –¥–∞–∂–µ –∫—Ä–∞—Å–Ω—ã–µ —à—Ç–∞–Ω—ã –Ω–µ –ø–æ–¥—Å–∫–∞–∑–∞–ª–∏?"
    },
    {
        "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª–∞—Å—å –∫–æ–º–∞–Ω–¥–∞ –õ–µ—Ö–∏ –∏ –î—ç–Ω–∏–ª–∞, –∫–æ–≥–¥–∞ –º—ã –∏–≥—Ä–∞–ª–∏ –≤ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≤ –±–∞–Ω–µ?",
        "options": ["–¢—é–ª–µ–Ω–∏-–∫–æ—Å–º–æ–Ω–∞–≤—Ç—ã", "–ú–æ—Ä–∂–∏-–ª—é–±–æ–≤–Ω–∏–∫–∏", "–ü–∏–Ω–≥–≤–∏–Ω—ã-–∏—Å–ø—ã—Ç–∞—Ç–µ–ª–∏", "–ê–π—Ç–∏—à–Ω–∏–∫–∏-–ø–∏–¥–æ—Ä—ã"],
        "answer": 1,
        "image": "https://i.ibb.co/wFbdS5rq/2025-04-05-18-46-47.jpg",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ö–∞–∫ —Ç—ã –≤–æ–æ–±—â–µ —ç—Ç–æ –ø–æ–º–Ω–∏—à—å?",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–æ –∏ –Ω–µ—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, –≤—Ä—è–¥ –ª–∏ –∫—Ç–æ-—Ç–æ, –∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞, —ç—Ç–æ –ø–æ–º–Ω–∏—Ç."
    },
    {
        "question": "–ù–∞ –∫–∞–∫–æ–π –Ω–∞—à–µ–π —Ç—É—Å–æ–≤–∫–µ –≤–ø–µ—Ä–≤—ã–µ –ø–æ—è–≤–∏–ª—Å—è –ê—Å—Ö–∞—Ç?",
        "options": ["–î–† –í –ü–£–°–¢–û–¢–ï", "–î–† –ù–ê –ö–†–´–®–ï", "–î–† –í –î–£–•–û–¢–ï - –î–í–ï –ë–ê–®–ù–ò", "–ö—Ç–æ —Ç–∞–∫–æ–π –ê—Å—Ö–∞—Ç?"],
        "answer": 1,
        "image": "https://i.ibb.co/JjtQvn5K/IMG-1378.jpg",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã —á—Ç–æ –ª–∏ –±—ã–ª —Ç–∞–º?",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–µ–º–Ω–æ–≥–∏–µ –≤—Å–ø–æ–º–Ω—è—Ç..."
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ –ø–∞–ª—å—Ü–µ–≤ —Ä–æ–º–∞ –Ω—É–∂–Ω–æ –Ω–∞ –æ–¥–∏–Ω —Å—Ç–∞–∫–∞–Ω –ö–æ–∫–æ—Å–æ–≤–æ–≥–æ –°—Ç—ç–Ω–ª–∏?",
        "options": ["–î–≤–∞", "–¢—Ä–∏", "–ß–µ—Ç—ã—Ä–µ", "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å"],
        "answer": 1,
        "image": "https://i.ibb.co/DSGshh5/IMG-6955.jpg",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–∫—É–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç?!",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ù—É –∏ –Ω–µ—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ ‚Äî —Ä–µ—Ü–µ–ø—Ç-—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π!"
    },
    {
        "question": "–ß—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ?",
        "options": ["–í–∏–¥–æ—Å—ã —Å –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ", "–ú–æ—Ä—Ç–∞–ª –∫–æ–º–±–∞—Ç", "–§—É—Ç–±–æ–ª", "–°–µ—Ä–∏—è \"–î—Ä—É–∑–µ–π\" –ø—Ä–æ –î–†"],
        "answer": 2,
        "image": "https://i.ibb.co/TMdHMZ9W/image.jpg",
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ß–ï 2024.",
        "incorrect_feedback": "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–∞–≤–µ—Ä–Ω–æ–µ —Ç—ã —Å–ø–∞–ª."
    },
    {
        "question": "–ö–∞–∫–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ –º—ã –ù–ï –ø–æ–∑–¥—Ä–∞–≤–∏–ª–∏ –î—ç–Ω–∏—ç–ª–∞ —Å –¥—Ä –≤ 2021 –≥–æ–¥—É?",
        "options": ["–õ–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏", "–í–æ –≤—Å–µ—Ö –±–µ—Å–µ–¥–∞—Ö –≤—Å–µ—Ö –¥—Ä", "–ì–æ–ª—É–±–∏–Ω–æ–π –ø–æ—á—Ç–æ–π", "–°–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Å–±–µ—Ä–±–∞–Ω–∫–µ"],
        "answer": 2,
        "image": "https://ideogram.ai/assets/image/lossless/response/mng6lWOaSl2H05lHK_gtBg",  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!",
        "incorrect_feedback": "‚ùå –ê –≤–æ—Ç –∏ –Ω–µ—Ç. –¢—ã —á—Ç–æ, –Ω–µ –ø–æ–∑–¥—Ä–∞–≤–ª—è–ª?"
    },
    {
        "question": "–ß—Ç–æ –º—ã –¥–µ–ª–∞–ª–∏ –Ω–∞–∫–∞–Ω—É–Ω–µ?",
        "options": ["–ü–∞—Ä–∏–ª–∏—Å—å –≤ –±–∞–Ω–µ", "–ñ–∞—Ä–∏–ª–∏ —à–∞—à–ª—ã–∫–∏", "–ü—Ä—è—Ç–∞–ª–∏—Å—å –æ—Ç —Ä–∞–∫–µ—Ç", "–ò–≥—Ä–∞–ª–∏ –≤ –Ω–∞—Ä–¥—ã"],
        "answer": 2,
        "image": "https://i.ibb.co/NdzJfq6b/photo-2025-04-11-01-08-07.jpg",  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
        "correct_feedback": "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í —Ç–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –±—ã–ª–æ —Å–æ–≤—Å–µ–º –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ",
        "incorrect_feedback": "‚ùå –•–æ—á–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
    },
]


user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {"score": 0, "current_q": 0}
    bot.send_message(message.chat.id, "üëã –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –Ω–∞—à–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ç—É—Å–æ–≤–∫–∏. \n\n –¢–∞–∫ —Ç—ã –¥–æ–∫–∞–∂–µ—à—å, —á—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω–æ –ö–æ–ª—è, –∞ –Ω–µ –∫–∞–∫–æ–π-—Ç–æ –±–æ—Ç üòè")
    send_question(message.chat.id)

def send_question(chat_id):
    user = user_data.get(chat_id)
    if user["current_q"] >= len(questions):
        return finish_quiz(chat_id)

    q_data = questions[user["current_q"]]
    markup = InlineKeyboardMarkup()

    for idx, option in enumerate(q_data["options"]):
        markup.add(InlineKeyboardButton(option, callback_data=f"answer_{idx}"))

    # Send image if available
    if "image" in q_data and q_data["image"]:
        bot.send_photo(chat_id, q_data["image"])

    bot.send_message(chat_id, f"{q_data['question']}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def answer_question(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)

    if not user or user["current_q"] >= len(questions):
        return

    q_data = questions[user["current_q"]]
    selected_option = int(call.data.split("_")[1])
    correct = selected_option == q_data["answer"]

    if correct:
        user["score"] += 1
        bot.answer_callback_query(call.id, "‚úÖ Correct!")
        bot.send_message(chat_id, q_data["correct_feedback"])
    else:
        bot.answer_callback_query(call.id, "‚ùå Wrong answer!")
        bot.send_message(chat_id, q_data["incorrect_feedback"])

    user["current_q"] += 1
    bot.send_message(chat_id, f"Score: {user['score']} / {user['current_q']}")
    send_question(chat_id)

def finish_quiz(chat_id):
    score = user_data[chat_id]["score"]

    if score == len(questions):
        result = "üéâ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã –ª–µ–≥–µ–Ω–¥–∞, –æ—Ç–∫—É–¥–∞ —Ç—ã –≤—Å–µ —ç—Ç–æ –∑–Ω–∞–µ—à—å? –ú–æ–∂–µ—Ç —Ç—ã —Å–æ—Å—Ç–∞–≤–ª—è–ª —ç—Ç–æ—Ç –∫–≤–∏–∑?"
    elif score >= len(questions) // 2:
        result = "üòä –•–∞—Ä–æ—à! –ú–Ω–æ–≥–æ –ø–æ–º–Ω–∏—à—å, —Ö—Ä–∞–Ω–∏—à—å –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ –≤ —Å–≤–æ–µ–π –ø–∞–º—è—Ç–∏"
    else:
        result = "üòÖ –®—Ç–æ—à... –∫–∞–∂–¥–µ—Ç—Å—è, —ç—Ç–æ –ø–æ–≤–æ–¥ —Å–æ–±—Ä–∞—Ç—å—Å—è –≤–Ω–æ–≤—å"

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?", callback_data="restart"))

    bot.send_message(chat_id, f"Quiz finished! Your final score: {score}/{len(questions)}\n{result}", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart_quiz(call):
    chat_id = call.message.chat.id
    user_data[chat_id] = {"score": 0, "current_q": 0}
    send_question(chat_id)

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_string = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/", methods=["GET"])
def index():
    bot.remove_webhook()
    bot.set_webhook(url=f"{os.getenv('RENDER_EXTERNAL_URL')}/{TOKEN}")
    return "Webhook set!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
